//=================================================================
// NPC : Refinador Batch (sin UI) – v1.2   2025-05-22
// Mapa: prontera 156 180   |   Sprite 4_M_REPAIRMAN (416)
//=================================================================
prontera,156,180,5	script	Refinador Batch	416,{

	//-------------------------------------------------------------
	// 1) LISTAR ÍTEMS EQUIPADOS REFINABLES
	//-------------------------------------------------------------
	mes "[Refinador]";
	setarray .@slots[0], EQI_HEAD_TOP, EQI_ARMOR, EQI_HAND_R, EQI_HAND_L,
	                     EQI_GARMENT,  EQI_SHOES, EQI_HEAD_MID, EQI_HEAD_LOW;
	for (.@i = 0; .@i < getarraysize(.@slots); .@i++) {
		.@slot = .@slots[.@i];
		.@id   = getequipid(.@slot);
		.@rfn  = getequiprefinerycnt(.@slot);     // -1 si no refinable
		if (.@id <= 0 || .@rfn == -1) continue;

		.@slot_a[.@n] = .@slot;
		.@id_a[.@n]   = .@id;
		.@rfn_a[.@n]  = .@rfn;
		.@menu$ += getitemname(.@id) + "  [+" + .@rfn + "]:";   // para select()
		.@n++;
	}
	if (!.@n) { mes "No llevas nada que pueda refinar."; close; }

	//-------------------------------------------------------------
	// 2) SELECCIÓN + REFINE OBJETIVO
	//-------------------------------------------------------------
	.@pick    = select(.@menu$) - 1;
	.@slotSel = .@slot_a[.@pick];
	.@idSel   = .@id_a[.@pick];
	.@curRef  = .@rfn_a[.@pick];

	mes "Ítem:^0080FF " + getitemname(.@idSel) + "^000000 (+"+.@curRef+")";
	mes "¿A qué nivel de refine deseas llegar?";
	input .@goal, .@curRef + 1, 10;
	if (.@goal <= .@curRef) { mes "Debes elegir un número mayor al refine actual."; close; }

	//-------------------------------------------------------------
	// 3) ¿SÓLO EQUIPADO O TODAS LAS COPIAS?
	//-------------------------------------------------------------
	.@invCopies = countitem(.@idSel);
	.@mode = 1; // solo equipado
	if (.@invCopies) {
		mes "Tienes ^FFA500" + .@invCopies + "^000000 copia(s) en inventario.";
		next;
		.@mode = select("Sólo el equipado:Refinar todo (equipo + copias)");
	}

	//-------------------------------------------------------------
	// 4) REFINAR LA PIEZA EQUIPADA
	//-------------------------------------------------------------
	callsub(RefinaUno, .@slotSel, .@goal);

	//-------------------------------------------------------------
	// 5) REFINAR COPIAS DEL INVENTARIO (si se eligió «todos»)
	//-------------------------------------------------------------
	if (.@mode == 2) {
		set .@procesadas, 0;

		while (countitem(.@idSel) > 0) {

			// Asegura slot libre
			if (getequipid(.@slotSel)) unequip .@slotSel;

			// Busca la siguiente copia
			getinventorylist;
			.@idx = -1;
			for (.@i = 0; .@i < @inventorylist_count; .@i++) {
				if (@inventorylist_id[.@i] == .@idSel) {
					.@idx = @inventorylist_idx[.@i];   // ← índice REAL
					break;
				}
			}
			if (.@idx == -1) break; // ya no hay copias

			equip .@idx;
			if (getequipid(.@slotSel) != .@idSel) break; // seguridad

			callsub(RefinaUno, .@slotSel, .@goal);
			.@procesadas++;
		}
		mes "[Refinador] "+.@procesadas+" copia(s) procesadas.";
	}

	mes "[Refinador] Trabajo finalizado.";
	close;

	//-------------------------------------------------------------
	// ■ RefinaUno – refina la pieza actualmente equipada en 'slot'
	//-------------------------------------------------------------
RefinaUno:
	.@slot = getarg(0);
	.@goal = getarg(1);
	.@id   = getequipid(.@slot);
	if (!.@id) return;

	.@tipo = getiteminfo(.@id, ITEMINFO_TYPE);
	.@lvlA = getiteminfo(.@id, ITEMINFO_EQUIP_LEVEL);

	while (getequiprefinerycnt(.@slot) < .@goal) {

		// Mineral requerido
		if (.@tipo == IT_ARMOR)       .@mat = 985;   // Elunium
		else if (.@lvlA == 1)         .@mat = 1010;  // Phracon
		else if (.@lvlA == 2)         .@mat = 1011;  // Emveretarcon
		else                          .@mat = 984;   // Oridecon

		if (countitem(.@mat) < 1) { dispbottom "[Falta] "+getitemname(.@mat); break; }
		delitem .@mat, 1;

		.@actual = getequiprefinerycnt(.@slot);
		.@rate   = callsub(Rate, .@tipo, .@lvlA, .@actual);

		if (rand(100) < .@rate) {
			successrefitem .@slot;
			dispbottom "[OK] "+getitemname(.@id)+" -> +"+(.@actual+1);
		} else {
			failedrefitem .@slot;
			dispbottom "[ROTO] "+getitemname(.@id);
			break;
		}
	}

	// Deja la pieza fuera (refinada o rota) para seguir el ciclo
	if (getequipid(.@slot) == .@id) unequip .@slot;
	return;

	//-------------------------------------------------------------
	// ■ Rate – devuelve % de éxito (sin literales de array)
	//-------------------------------------------------------------
Rate:
	.@t   = getarg(0);
	.@lvl = getarg(1);
	.@cur = getarg(2);

	// Armaduras
	if (.@t == IT_ARMOR) {
		switch (.@cur) {
			case 0: return 100;
			case 1: return 100;
			case 2: return 100;
			case 3: return 100;
			case 4: return 70;
			case 5: return 50;
			case 6: return 40;
			case 7: return 30;
			case 8: return 20;
			case 9: return 10;
			case 10: return 5;
		}
	}

	// Armas nivel 1
	if (.@lvl == 1) {
		switch (.@cur) {
			case 0: return 100;
			case 1: return 100;
			case 2: return 100;
			case 3: return 100;
			case 4: return 90;
			case 5: return 80;
			case 6: return 70;
			case 7: return 60;
			case 8: return 40;
			case 9: return 20;
			case 10: return 10;
		}
	}
	// Armas nivel 2
	if (.@lvl == 2) {
		switch (.@cur) {
			case 0: return 100;
			case 1: return 100;
			case 2: return 100;
			case 3: return 100;
			case 4: return 90;
			case 5: return 70;
			case 6: return 50;
			case 7: return 40;
			case 8: return 30;
			case 9: return 20;
			case 10: return 10;
		}
	}
	// Armas nivel 3
	if (.@lvl == 3) {
		switch (.@cur) {
			case 0: return 100;
			case 1: return 100;
			case 2: return 100;
			case 3: return 100;
			case 4: return 80;
			case 5: return 60;
			case 6: return 40;
			case 7: return 20;
			case 8: return 15;
			case 9: return 10;
			case 10: return 5;
		}
	}
	// Armas nivel 4
	switch (.@cur) {
		case 0: return 100;
		case 1: return 100;
		case 2: return 100;
		case 3: return 100;
		case 4: return 70;
		case 5: return 50;
		case 6: return 30;
		case 7: return 15;
		case 8: return 10;
		case 9: return 5;
		case 10: return 3;
	}
	return 0; // no debería llegar
}
