//==============================================================
// NPC :	Refinador Batch (sin UI) – v1.4-T	2025-05-22
//==============================================================
prontera,156,180,5	script	Refinador Batch	416,{

	//----------------------------------------------------------
	// 1) Mostrar ítems equipados refinables
	//----------------------------------------------------------
	mes	"[Refinador]";
	setarray	.@slots[0],	EQI_HEAD_TOP,	EQI_ARMOR,	EQI_HAND_R,	EQI_HAND_L,	EQI_GARMENT,	EQI_SHOES,	EQI_HEAD_MID,	EQI_HEAD_LOW;
	for (.@i = 0; .@i < getarraysize(.@slots); .@i++) {
		.@slot	= .@slots[.@i];
		.@id	= getequipid(.@slot);
		.@rfn	= getequiprefinerycnt(.@slot);
		if (.@id <= 0 || .@rfn == -1)	continue;

		.@slot_a[.@n]	= .@slot;
		.@id_a[.@n]		= .@id;
		.@rfn_a[.@n]	= .@rfn;
		.@menu$	+= getitemname(.@id) + "  [+"+.@rfn+"]:";
		.@n++;
	}
	if (!.@n) { mes "No llevas nada que pueda refinar."; close; }

	//----------------------------------------------------------
	// 2) Elegir pieza + refine meta
	//----------------------------------------------------------
	.@pick		= select(.@menu$) - 1;
	.@slotSel	= .@slot_a[.@pick];
	.@idSel		= .@id_a[.@pick];
	.@curRef	= .@rfn_a[.@pick];

	mes	"Ítem:^0080FF "+getitemname(.@idSel)+"^000000 (+"+.@curRef+")";
	mes	"¿A qué nivel de refine quieres llegar?";
	input	.@goal,	.@curRef+1,	10;
	if (.@goal <= .@curRef) { mes "Debe ser mayor al refine actual."; close; }

	//----------------------------------------------------------
	// 3) ¿Sólo equipado o todas las copias?
	//----------------------------------------------------------
	.@invCopies	= countitem(.@idSel);
	.@mode	= 1;
	if (.@invCopies) {
		mes	"Copias en inventario: ^FFA500"+.@invCopies+"^000000";
		next;
		.@mode	= select("Sólo el equipado:Refinar todo (equipo + copias)");
	}

	//----------------------------------------------------------
	// 4) Refinar la pieza equipada
	//----------------------------------------------------------
	callsub(RefinaUno,	.@slotSel,	.@goal);

	//----------------------------------------------------------
// 5) Refinar copias si se eligió “todos” (modo 2)
//----------------------------------------------------------
if (.@mode == 2) {
    // 5.0) Debug: inicio de batch
    dispbottom "[Refinador] Iniciando modo batch: ItemID=" + .@idSel + ", Objetivo +" + .@goal;

    // 5.1) Listar todas las posiciones de inventario con ese ID
    getinventorylist;
    setarray .@inv_slots[0], 0;
    .@k = 0;
    for (.@i = 0; .@i < @inventorylist_count; .@i++) {
        if (@inventorylist_id[.@i] == .@idSel) {
            .@inv_slots[.@k++] = @inventorylist_idx[.@i];
        }
    }
    dispbottom "[Refinador] Encontradas " + .@k + " copias para procesar";

    // 5.2) Recorrer cada slot guardado
    .@procesadas = 0;
    for (.@i = 0; .@i < .@k; .@i++) {
        .@invIdx = .@inv_slots[.@i];
        dispbottom "[Refinador] Iteración " + (.@i+1) + " / " + .@k + " – slotIdx=" + .@invIdx;

        // 5.2.1) Desequipar equipo actual si lo hay
        if (getequipid(.@slotSel)) {
            dispbottom "[Refinador] Desequipando slotSel=" + .@slotSel;
            unequip .@slotSel;
            sleep2 500;  // pausa 500 ms para asegurar que el servidor procese la des-equipación :contentReference[oaicite:0]{index=0}
        }

        // 5.2.2) Intentar equipar la copia en inventario
        dispbottom "[Refinador] Equipando copia desde idx=" + .@invIdx;
        equip .@invIdx;
        sleep2 500;  // esperamos un poco para que el equip se confirme
        if (getequipid(.@slotSel) != .@idSel) {
            dispbottom "[Error] No se pudo equipar copia en idx=" + .@invIdx;
            continue;  // pasamos a la siguiente
        }
        dispbottom "[Refinador] Equipado correctamente";

        // 5.2.3) Llamar al subproceso de refinado para este slot
        dispbottom "[Refinador] Refinando nivel +" + .@goal;
        callsub(RefinaUno, .@slotSel, .@goal);
        .@procesadas += 1;
        dispbottom "[Refinador] Refinado completado para idx=" + .@invIdx;
    }

    // 5.3) Fin de batch
    dispbottom "[Refinador] Batch finalizado: " + .@procesadas + " copia(s) procesada(s)";
}

	mes	"[Refinador] Trabajo finalizado.";
	close;

	//----------------------------------------------------------
	// ■ RefinaUno – refina la pieza equipada
	//----------------------------------------------------------
RefinaUno:
	.@slot	= getarg(0);
	.@goal	= getarg(1);
	.@id	= getequipid(.@slot);
	if (!.@id)	return;

	.@tipo	= getiteminfo(.@id, ITEMINFO_TYPE);
	.@lvlA	= getiteminfo(.@id, ITEMINFO_EQUIP_LEVEL);

	while (getequiprefinerycnt(.@slot) < .@goal) {

		if (.@tipo == IT_ARMOR)		set .@mat,	985;
		else if (.@lvlA == 1)		set .@mat,	1010;
		else if (.@lvlA == 2)		set .@mat,	1011;
		else						set .@mat,	984;

		if (countitem(.@mat) < 1) { dispbottom "[Falta] "+getitemname(.@mat); break; }
		delitem	.@mat,	1;

		.@act	= getequiprefinerycnt(.@slot);
		.@rate	= callsub(Rate,	.@tipo,	.@lvlA,	.@act);

		if (rand(100) < .@rate) {
			successrefitem	.@slot;
			dispbottom	"[OK] "+getitemname(.@id)+" -> +"+(.@act+1);
		} else {
			failedrefitem	.@slot;
			dispbottom	"[ROTO] "+getitemname(.@id);
			break;
		}
	}
	if (getequipid(.@slot) == .@id)	unequip	.@slot;
	return;

	//----------------------------------------------------------
	// ■ Rate – % de éxito
	//----------------------------------------------------------
Rate:
	.@t	= getarg(0);
	.@lvl= getarg(1);
	.@cur= getarg(2);

	if (.@t == IT_ARMOR) {
		switch (.@cur) {
			case 0: case 1: case 2: case 3:	return 100;
			case 4:	return 70;
			case 5:	return 50;
			case 6:	return 40;
			case 7:	return 30;
			case 8:	return 20;
			case 9:	return 10;
			case 10:return 5;
		}
	}
	if (.@lvl == 1) {
		switch (.@cur) {
			case 0: case 1: case 2: case 3:	return 100;
			case 4:	return 90;
			case 5:	return 80;
			case 6:	return 70;
			case 7:	return 60;
			case 8:	return 40;
			case 9:	return 20;
			case 10:return 10;
		}
	}
	if (.@lvl == 2) {
		switch (.@cur) {
			case 0: case 1: case 2: case 3:	return 100;
			case 4:	return 90;
			case 5:	return 70;
			case 6:	return 50;
			case 7:	return 40;
			case 8:	return 30;
			case 9:	return 20;
			case 10:return 10;
		}
	}
	if (.@lvl == 3) {
		switch (.@cur) {
			case 0: case 1: case 2: case 3:	return 100;
			case 4:	return 80;
			case 5:	return 60;
			case 6:	return 40;
			case 7:	return 20;
			case 8:	return 15;
			case 9:	return 10;
			case 10:return 5;
		}
	}
	switch (.@cur) { // lvl 4
		case 0: case 1: case 2: case 3:	return 100;
		case 4:	return 70;
		case 5:	return 50;
		case 6:	return 30;
		case 7:	return 15;
		case 8:	return 10;
		case 9:	return 5;
		case 10:return 3;
	}
	return 0;
}
